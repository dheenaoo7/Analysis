const keywordsSkills = {
    airflow: "Airflow",
    alteryx: "Alteryx",
    "asp.net": "ASP.NET",
    atlassian: "Atlassian",
    excel: "Excel",
    "power_bi": "Power BI",
    tableau: "Tableau",
    srss: "SRSS",
    word: "Word",
    unix: "Unix",
    vue: "Vue",
    jquery: "jQuery",
    "linux/unix": "Linux / Unix",
    seaborn: "Seaborn",
    microstrategy: "MicroStrategy",
    spss: "SPSS",
    visio: "Visio",
    gdpr: "GDPR",
    ssrs: "SSRS",
    spreadsheet: "Spreadsheet",
    aws: "AWS",
    hadoop: "Hadoop",
    ssis: "SSIS",
    linux: "Linux",
    sap: "SAP",
    powerpoint: "PowerPoint",
    sharepoint: "SharePoint",
    redshift: "Redshift",
    snowflake: "Snowflake",
    qlik: "Qlik",
    cognos: "Cognos",
    pandas: "Pandas",
    spark: "Spark",
    outlook: "Outlook",
    sql: "SQL",
    python: "Python",
    javascript: "JavaScript",
    js: "JS",
    java: "Java",
    scala: "Scala",
    sas: "SAS",
    matlab: "MATLAB",
    "c++": "C++",
    perl: "Perl",
    typescript: "TypeScript",
    bash: "Bash",
    html: "HTML",
    css: "CSS",
    php: "PHP",
    powershell: "Powershell",
    rust: "Rust",
    kotlin: "Kotlin",
    ruby: "Ruby",
    dart: "Dart",
    assembly: "Assembly",
    swift: "Swift",
    vba: "VBA",
    lua: "Lua",
    groovy: "Groovy",
    delphi: "Delphi",
    "objective-c": "Objective-C",
    haskell: "Haskell",
    elixir: "Elixir",
    julia: "Julia",
    clojure: "Clojure",
    solidity: "Solidity",
    lisp: "Lisp",
    "f#": "F#",
    fortran: "Fortran",
    erlang: "Erlang",
    apl: "APL",
    cobol: "COBOL",
    ocaml: "OCaml",
    crystal: "Crystal",
    golang: "Golang",
    nosql: "NoSQL",
    mongodb: "MongoDB",
    "t-sql": "Transact-SQL",
    "pl/sql": "PL/SQL",
    vbnet: "VB.NET",
    mssql: "MSSQL",
  };
  
  function escapeRegex(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
  
  // Precompile patterns safely
  const patterns = {};
  for (const key in keywordsSkills) {
    const escaped = escapeRegex(key);
    patterns[key] = new RegExp(`\\b${escaped}\\b`, "i"); // word boundary safe
  }
  
  module.exports = { keywordsSkills, patterns };  